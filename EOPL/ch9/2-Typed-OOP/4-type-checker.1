#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 47 151 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 64 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 211 211 211 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 211 211 211 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 128 128 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 128 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 192 0 0 0 -1
-1 2 49 #"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 192 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 89 172 255 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 89 172 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 2407 0 28 3 1 #"("
0 0 16 3 6 #"module"
0 0 28 3 1 #" "
0 0 14 3 7 #"checker"
0 0 28 3 2 #" ("
0 0 14 3 3 #"lib"
0 0 28 3 1 #" "
0 0 20 3 9 #"\"eopl.ss\""
0 0 28 3 1 #" "
0 0 20 3 6 #"\"eopl\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 12 #"\"0-lang.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 22 #"\"4-static-classes.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 30 #"\"4-static-data-structures.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 28 3 1 #" "
0 0 14 3 5 #"typer"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 21 #"type-to-external-form"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 7 #"type-of"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 15 #"type-of-program"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 65
#";****************************************************************"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 177
(
 #"; \346\212\212\351\227\256\351\242\230\345"
 #"\210\206\350\247\243\357\274\232 \345\246\202"
 #"\344\275\225\345\257\271\344\270\200\344\270\252"
 #"Class\350\277\233\350\241\214type-check\345\221\242\357"
 #"\274\237======>  \342"
 #"\226\210\342\226\210\342\226\210\342\226\210\342"
 #"\226\210\342\226\210\342\226\210\342\226\210 "
 #"\345\257\271\344\272\216Class\347"
 #"\232\204\344\275\277\347\224\250\350\200\205\346"
 #"\235\245\350\257\264\357\274\232Clas"
 #"s\344\270\215\350\277\207\346\230\257\344\270\252 var/meth"
 #"od <--> Type \347\232\204\351\233\206\345\220\210"
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 81
(
 #";   \346\230\276\347\204\266\357\274"
 #"\214\346\210\221\345\217\257\344\273\245\344\273"
 #"\216\347\255\276\345\220\215\344\270\212\350\216"
 #"\267\345\217\226\345\205\266\344\270\255\345\220\204 fields, "
 #"methods \347\254\246\345\217\267\347\232\204\347\261\273\345\236\213"
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 125
(
 #";        \351\202\243\344\271\210\346\210\221\350\246\201chec"
 #"k\346\226\271\346\263\225\347\232\204body-exp (TEnv\344"
 #"\270\272fields,self,super)\342\200\224\342\200"
 #"\224> \347\241\256\344\277\235\345\205\266 body-exp\347\232\204\347"
 #"\261\273\345\236\213\344\270\216result-type\344\270\200\350\207\264"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 104
(
 #"; \345\257\271\344\272\216method-call\357\274\214 \346\210"
 #"\221\350\246\201\346\243\200\346\237\245\345\205"
 #"\266\345\256\236\345\217\202\347\261\273\345\236\213 int * bool "
 #"\344\270\216\347\233\256\346\240\207method\347\232\204\345\275\242"
 #"\345\274\217\345\217\202\346\225\260\344"
 #"\270\200\344\270\200\345\257\271\345\272\224"
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 65
#"; ==============================================================="
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"typer"
0 0 28 3 1 #" "
0 0 14 3 3 #"src"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 2 #" ("
0 0 14 3 15 #"type-of-program"
0 0 28 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 28 3 1 #" "
0 0 14 3 3 #"src"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 36 #";; type-of-program : Program -> Type"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 13 #";; Page: 358 "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 15 #"type-of-program"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 7 #"Program"
0 0 28 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"$a-program"
0 0 28 3 2 #" ("
0 0 14 3 11 #"class-decls"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                    "
0 0 18 3 9 #"; Classes"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 21 #"initialize-static-cla"
0 0 14 3 1 #"s"
0 0 14 3 6 #"s-env!"
0 0 28 3 1 #" "
0 0 14 3 11 #"class-decls"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                    "
0 0 18 3 2 #"; "
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 8 #"for-each"
0 0 28 3 1 #" "
0 0 14 3 9 #"check-cla"
0 0 14 3 1 #"s"
0 0 14 3 1 #"s"
0 0 14 3 6 #"-decl!"
0 0 28 3 1 #" "
0 0 14 3 11 #"class-decls"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                    "
0 0 18 3 14 #"; program-body"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 28 3 2 #" ("
0 0 14 3 9 #"init-tenv"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 24 #";; type-of : Exp -> Tenv"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 20 #";; Page: 360 and 364"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 7 #"type-of"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"$const-exp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"num"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 9 #"$int-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 8 #"$var-exp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"var"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 10 #"apply-tenv"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"$diff-exp"
0 0 28 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 5 #"type1"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 5 #"type2"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 5 #"type1"
0 0 28 3 2 #" ("
0 0 14 3 9 #"$int-type"
0 0 28 3 2 #") "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 5 #"type2"
0 0 28 3 2 #" ("
0 0 14 3 9 #"$int-type"
0 0 28 3 2 #") "
0 0 14 3 4 #"exp2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 9 #"$int-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 8 #"$sum-exp"
0 0 28 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 5 #"type1"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 5 #"type2"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 5 #"type1"
0 0 28 3 2 #" ("
0 0 14 3 9 #"$int-type"
0 0 28 3 2 #") "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 5 #"type2"
0 0 28 3 2 #" ("
0 0 14 3 9 #"$int-type"
0 0 28 3 2 #") "
0 0 14 3 4 #"exp2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 9 #"$int-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"$zero?-exp"
0 0 28 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 5 #"type1"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 5 #"type1"
0 0 28 3 2 #" ("
0 0 14 3 9 #"$int-type"
0 0 28 3 2 #") "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 10 #"$bool-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 7 #"$if-exp"
0 0 28 3 2 #" ("
0 0 14 3 8 #"test-exp"
0 0 28 3 1 #" "
0 0 14 3 8 #"true-exp"
0 0 28 3 1 #" "
0 0 14 3 9 #"false-exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                     (("
0 0 14 3 9 #"test-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 8 #"test-exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 9 #"then-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 8 #"true-exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 9 #"else-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 9 #"false-exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                   "
0 0 18 3 47 #";; these tests either succeed or raise an error"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 9 #"test-type"
0 0 28 3 2 #" ("
0 0 14 3 10 #"$bool-type"
0 0 28 3 2 #") "
0 0 14 3 8 #"test-exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 9 #"then-type"
0 0 28 3 1 #" "
0 0 14 3 9 #"else-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                   "
0 0 14 3 9 #"then-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 8 #"$let-exp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #") "
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 8 #"new-tenv"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 12 #"$extend-tenv"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 14 3 3 #"ids"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 14 3 13 #"types-of-exps"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #" "
0 0 14 3 8 #"new-tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"$proc-exp"
0 0 28 3 2 #" ("
0 0 14 3 5 #"bvars"
0 0 28 3 1 #" "
0 0 14 3 10 #"bvar-types"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 11 #"result-type"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 14 3 12 #"$extend-tenv"
0 0 28 3 1 #" "
0 0 14 3 5 #"bvars"
0 0 28 3 1 #" "
0 0 14 3 10 #"bvar-types"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 10 #"$proc-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"bvar-types"
0 0 28 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"$call-exp"
0 0 28 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 2 #") "
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 10 #"rator-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 5 #"rator"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 10 #"rand-types"
0 0 28 3 3 #"  ("
0 0 14 3 13 #"types-of-exps"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 18 #"\342\226\221\342\226\221type-of-call"
0 0 28 3 1 #" "
0 0 14 3 10 #"rator-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"rand-types"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 11 #"$letrec-exp"
0 0 28 3 2 #" ("
0 0 14 3 17 #"proc-result-types"
0 0 28 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                        "
0 0 14 3 6 #"bvarss"
0 0 28 3 1 #" "
0 0 14 3 11 #"bvar-typess"
0 0 28 3 1 #" "
0 0 14 3 11 #"proc-bodies"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                        "
0 0 14 3 11 #"letrec-body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 20 #"tenv-for-letrec-body"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 12 #"$extend-tenv"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 14 3 10 #"proc-names"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 10 #"$proc-type"
0 0 28 3 1 #" "
0 0 14 3 11 #"bvar-typess"
0 0 28 3 1 #" "
0 0 14 3 17 #"proc-result-types"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 14 3 8 #"for-each"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 16 #"proc-result-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"bvar-types"
0 0 28 3 1 #" "
0 0 14 3 5 #"bvars"
0 0 28 3 1 #" "
0 0 14 3 9 #"proc-body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 14 #"proc-body-type"
0 0 28 29 1 #"\n"
0 0 28 3 34 #"                                 ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 9 #"proc-body"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                          ("
0 0 14 3 12 #"$extend-tenv"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                           "
0 0 14 3 5 #"bvars"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                           "
0 0 14 3 10 #"bvar-types"
0 0 28 29 1 #"\n"
0 0 28 3 43 #"                                           "
0 0 14 3 20 #"tenv-for-letrec-body"
0 0 28 3 5 #")))) "
0 0 18 3 5 #";; !!"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 14 3 14 #"proc-body-type"
0 0 28 3 1 #" "
0 0 14 3 16 #"proc-result-type"
0 0 28 3 1 #" "
0 0 14 3 9 #"proc-body"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                        "
0 0 14 3 17 #"proc-result-types"
0 0 28 3 1 #" "
0 0 14 3 11 #"bvar-typess"
0 0 28 3 1 #" "
0 0 14 3 6 #"bvarss"
0 0 28 3 1 #" "
0 0 14 3 11 #"proc-bodies"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 28 3 1 #" "
0 0 14 3 20 #"tenv-for-letrec-body"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"$begin-exp"
0 0 28 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"exps"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 16 3 6 #"letrec"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                        (("
0 0 14 3 14 #"type-of-begins"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 2 #"es"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 2 #"v1"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 28 3 1 #" "
0 0 14 3 2 #"es"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 34 #"                                  "
0 0 14 3 2 #"v1"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 14 #"type-of-begins"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 2 #"es"
0 0 28 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 2 #"es"
0 0 28 3 7 #")))))))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 14 #"type-of-begins"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"exps"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 11 #"$assign-exp"
0 0 28 3 2 #" ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 17 #"check-is-subtype!"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 10 #"apply-tenv"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                      "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 10 #"$void-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"$list-exp"
0 0 28 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"exps"
0 0 28 3 2 #") "
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 11 #"type-of-car"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 8 #"for-each"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 14 3 17 #"check-equal-type!"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                         "
0 0 14 3 11 #"type-of-car"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                         "
0 0 14 3 3 #"exp"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                      "
0 0 14 3 4 #"exps"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 14 3 10 #"$list-type"
0 0 28 3 1 #" "
0 0 14 3 11 #"type-of-car"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 112
(
 #";; -----------------------------------------------------------------"
 #"--------------------object stuff begins here"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 15 #"$new-object-exp"
0 0 28 3 2 #" ("
0 0 14 3 8 #"cls-name"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 9 #"arg-types"
0 0 28 3 2 #" ("
0 0 14 3 13 #"types-of-exps"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 2 #"sc"
0 0 28 3 2 #" ("
0 0 14 3 19 #"lookup-static-class"
0 0 28 3 1 #" "
0 0 14 3 8 #"cls-name"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 11 #"StaticClass"
0 0 28 3 1 #" "
0 0 14 3 2 #"sc"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 13 #"$an-interface"
0 0 28 3 2 #" ("
0 0 14 3 11 #"method-tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 45 #"                                            ("
0 0 14 3 33 #"report-cant-instantiate-interface"
0 0 28 3 1 #" "
0 0 14 3 8 #"cls-name"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 15 #"$a-static-class"
0 0 28 3 2 #" ("
0 0 14 3 10 #"super-name"
0 0 28 3 1 #" "
0 0 14 3 7 #"i-names"
0 0 28 3 1 #" "
0 0 14 3 11 #"field-names"
0 0 28 3 1 #" "
0 0 14 3 11 #"field-types"
0 0 28 3 1 #" "
0 0 14 3 11 #"method-tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 46 #"                                              "
0 0 18 3 69
(
 #";; check the call to init"
 #"ialize --- new\350\241\250\350\276\276\345\274"
 #"\217\347\233\270\345\275\223\344\272\216initialize()"
) 0 0 28 29 1 #"\n"
0 0 28 3 47 #"                                              ("
0 0 14 3 18 #"\342\226\221\342\226\221type-of-call"
0 0 28 29 1 #"\n"
0 0 28 3 48 #"                                               ("
0 0 14 3 16 #"find-method-type"
0 0 28 3 1 #" "
0 0 14 3 8 #"cls-name"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 10 #"initialize"
0 0 28 3 2 #") "
0 0 28 29 1 #"\n"
0 0 28 3 47 #"                                               "
0 0 14 3 9 #"arg-types"
0 0 28 29 1 #"\n"
0 0 28 3 47 #"                                               "
0 0 14 3 5 #"rands"
0 0 28 29 1 #"\n"
0 0 28 3 47 #"                                               "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 46 #"                                              "
0 0 18 3 38 #";; and return the class name as a type"
0 0 28 29 1 #"\n"
0 0 28 3 47 #"                                              ("
0 0 14 3 11 #"$class-type"
0 0 28 3 1 #" "
0 0 14 3 8 #"cls-name"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"$self-exp"
0 0 28 3 3 #" ()"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 10 #"apply-tenv"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"%self"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 16 #"$method-call-exp"
0 0 28 3 2 #" ("
0 0 14 3 7 #"obj-exp"
0 0 28 3 1 #" "
0 0 14 3 11 #"method-name"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 9 #"arg-types"
0 0 28 3 2 #" ("
0 0 14 3 13 #"types-of-exps"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                ("
0 0 14 3 8 #"obj-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 7 #"obj-exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 18 #"\342\226\221\342\226\221type-of-call"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 16 #"find-method-type"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 14 3 16 #"type->class-name"
0 0 28 3 1 #" "
0 0 14 3 8 #"obj-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                              "
0 0 14 3 11 #"method-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 14 3 9 #"arg-types"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 14 3 5 #"rands"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 15 #"$super-call-exp"
0 0 28 3 2 #" ("
0 0 14 3 11 #"method-name"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 9 #"arg-types"
0 0 28 3 2 #" ("
0 0 14 3 13 #"types-of-exps"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 8 #"obj-type"
0 0 28 3 2 #" ("
0 0 14 3 10 #"apply-tenv"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"%self"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           ("
0 0 14 3 18 #"\342\226\221\342\226\221type-of-call"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 16 #"find-method-type"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 10 #"apply-tenv"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"%super"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                             "
0 0 14 3 11 #"method-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                            "
0 0 14 3 9 #"arg-types"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                            "
0 0 14 3 5 #"rands"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                            "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 45 #";; this matches interp.scm:  interp.scm calls"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 62
#";; object->class-name, which fails on a non-object, so we need"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 54 #";; to make sure that obj-type is in fact a class type."
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 62
#";; interp.scm calls is-subclass?, which never raises an error,"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 56 #";; so we don't need to do anything with class-name here."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"$cast-exp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 12 #"tar-cls-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 8 #"obj-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 11 #"class-type?"
0 0 28 3 1 #" "
0 0 14 3 8 #"obj-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 11 #"$class-type"
0 0 28 3 1 #" "
0 0 14 3 12 #"tar-cls-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 23 #"report-bad-type-to-cast"
0 0 28 3 1 #" "
0 0 14 3 8 #"obj-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 61
#";; instanceof in interp.scm behaves the same way as cast:  it"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 58
#";; calls object->class-name on its argument, so we need to"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 57 #";; check that the argument is some kind of object, but we"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 18 3 43 #";; don't need to look at class-name at all."
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 15 #"$instanceof-exp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 8 #"obj-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 11 #"class-type?"
0 0 28 3 1 #" "
0 0 14 3 8 #"obj-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 10 #"$bool-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 29 #"report-bad-type-to-instanceof"
0 0 28 3 1 #" "
0 0 14 3 8 #"obj-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"        )))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 33 #"report-cant-instantiate-interface"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 10 #"class-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 19 #"type-of-new-obj-exp"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 32 #"\"Can't instantiate interface ~s\""
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 10 #"class-name"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 13 #"types-of-exps"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 28 3 3 #") ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 59
#";; type-of-call : Type * Listof(Type) * Listof(Exp) -> Type"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 360"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 18 #"\342\226\221\342\226\221type-of-call"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 10 #"rator-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"rand-types"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"Type"
0 0 28 3 1 #" "
0 0 14 3 10 #"rator-type"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"$proc-type"
0 0 28 3 2 #" ("
0 0 14 3 9 #"arg-types"
0 0 28 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 16 3 4 #"when"
0 0 28 3 2 #" ("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 1 #"="
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 9 #"arg-types"
0 0 28 3 3 #") ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 10 #"rand-types"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 32 #"report-wrong-number-of-arguments"
0 0 28 3 1 #" "
0 0 14 3 9 #"arg-types"
0 0 28 3 1 #" "
0 0 14 3 10 #"rand-types"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 8 #"for-each"
0 0 28 3 1 #" "
0 0 14 3 17 #"check-is-subtype!"
0 0 28 3 1 #" "
0 0 14 3 10 #"rand-types"
0 0 28 3 1 #" "
0 0 14 3 9 #"arg-types"
0 0 28 3 1 #" "
0 0 14 3 5 #"rands"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                    "
0 0 14 3 11 #"result-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 16 3 4 #"else"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 29 #"report-rator-not-of-proc-type"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 10 #"rator-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 3 #"exp"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 29 #"report-rator-not-of-proc-type"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 24 #"external-form-rator-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 12 #"type-of-call"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 33 #"\"rator ~s is not of proc-type ~s\""
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 24 #"external-form-rator-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 32 #"report-wrong-number-of-arguments"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 9 #"arg-types"
0 0 28 3 1 #" "
0 0 14 3 10 #"rand-types"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 12 #"type-of-call"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 41 #"\"These are not the same: ~s and ~s in ~s\""
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 9 #"arg-types"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 10 #"rand-types"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 47 #";; check-class-decl! : ClassDecl -> Unspecified"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 367"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 17 #"check-class-decl!"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 6 #"c-decl"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 9 #"ClassDecl"
0 0 28 3 1 #" "
0 0 14 3 6 #"c-decl"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 18 #"$an-interface-decl"
0 0 28 3 2 #" ("
0 0 14 3 6 #"i-name"
0 0 28 3 1 #" "
0 0 14 3 16 #"abs-method-decls"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                            "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 13 #"$a-class-decl"
0 0 28 3 2 #" ("
0 0 14 3 10 #"class-name"
0 0 28 3 1 #" "
0 0 14 3 10 #"super-name"
0 0 28 3 1 #" "
0 0 14 3 7 #"i-names"
0 0 28 3 1 #" "
0 0 14 3 11 #"field-types"
0 0 28 3 1 #" "
0 0 14 3 11 #"field-names"
0 0 28 3 1 #" "
0 0 14 3 12 #"method-decls"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                       "
0 0 18 3 77
(
 #"; \346\243\200\346\237\245\346\257\217\344"
 #"\270\200\344\270\252method "
 #": \351\241\273\347\237\245\351\201\223\346"
 #"\211\200\346\234\211\347\233\270\345\205\263\347\232\204types "
 #": fields, self, super"
) 0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 2 #"sc"
0 0 28 3 2 #" ("
0 0 14 3 19 #"lookup-static-class"
0 0 28 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 8 #"for-each"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 11 #"method-decl"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 18 #"check-method-decl!"
0 0 28 3 1 #" "
0 0 14 3 11 #"method-decl"
0 0 28 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 28 3 1 #" "
0 0 14 3 10 #"super-name"
0 0 28 3 2 #" ("
0 0 14 3 25 #"static-class->field-names"
0 0 28 3 1 #" "
0 0 14 3 2 #"sc"
0 0 28 3 3 #") ("
0 0 14 3 25 #"static-class->field-types"
0 0 28 3 1 #" "
0 0 14 3 2 #"sc"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 14 3 12 #"method-decls"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                       "
0 0 18 3 40
(
 #"; \346\243\200\346\237\245\350\257\245Class\346\230\257\345"
 #"\220\246\345\256\236\347\216\260\344\272\206interface"
) 0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 14 3 8 #"for-each"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 6 #"i-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 14 3 20 #"check-if-implements!"
0 0 28 3 1 #" "
0 0 14 3 10 #"class-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                        "
0 0 14 3 7 #"i-names"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                       ))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 96
(
 #";; check-method-decl! :: MethodDecl * ClassName * ClassName * Listof"
 #"(FieldName) * Listof(Type)  "
) 0 0 18 3 2 #"->"
0 0 18 3 12 #" Unspecified"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 368"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 18 #"check-method-decl!"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 6 #"m-decl"
0 0 28 3 1 #" "
0 0 14 3 9 #"self-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-name"
0 0 28 3 1 #" "
0 0 14 3 7 #"f-names"
0 0 28 3 1 #" "
0 0 14 3 7 #"f-types"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 10 #"MethodDecl"
0 0 28 3 1 #" "
0 0 14 3 6 #"m-decl"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 14 #"$a-method-decl"
0 0 28 3 2 #" ("
0 0 14 3 8 #"res-type"
0 0 28 3 1 #" "
0 0 14 3 6 #"m-name"
0 0 28 3 1 #" "
0 0 14 3 4 #"vars"
0 0 28 3 1 #" "
0 0 14 3 9 #"var-types"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                        "
0 0 18 3 63
(
 #"; \345\260\206fields, args, self/s"
 #"uper \350\277\2313\346\240\267\347\232\204type"
 #" info\345\212\240\345\205\245tenv\344\270\255 "
) 0 0 28 29 1 #"\n"
0 0 28 3 25 #"                        ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 4 #"tenv"
0 0 28 3 2 #" ("
0 0 14 3 12 #"$extend-tenv"
0 0 28 3 1 #" "
0 0 14 3 4 #"vars"
0 0 28 3 1 #" "
0 0 14 3 9 #"var-types"
0 0 28 29 1 #"\n"
0 0 28 3 51 #"                                                  ("
0 0 14 3 32 #"$extend-tenv-with-self-and-super"
0 0 28 3 2 #" ("
0 0 14 3 11 #"$class-type"
0 0 28 3 1 #" "
0 0 14 3 9 #"self-name"
0 0 28 3 2 #") "
0 0 14 3 6 #"s-name"
0 0 28 29 1 #"\n"
0 0 28 3 85
(
 #"                                                                    "
 #"                ("
) 0 0 14 3 12 #"$extend-tenv"
0 0 28 3 1 #" "
0 0 14 3 7 #"f-names"
0 0 28 3 1 #" "
0 0 14 3 7 #"f-types"
0 0 28 29 1 #"\n"
0 0 28 3 99
(
 #"                                                                    "
 #"                              ("
) 0 0 14 3 9 #"init-tenv"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 9 #"body-type"
0 0 28 3 2 #" ("
0 0 14 3 7 #"type-of"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #" "
0 0 14 3 4 #"tenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                            "
0 0 18 3 39
(
 #"; \346\243\200\346\237\245body\347\232\204\347\261\273\345"
 #"\236\213\346\230\257\345\220\246 <: res-type"
) 0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 17 #"check-is-subtype!"
0 0 28 3 1 #" "
0 0 14 3 9 #"body-type"
0 0 28 3 1 #" "
0 0 14 3 8 #"res-type"
0 0 28 3 1 #" "
0 0 14 3 6 #"m-decl"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                            "
0 0 18 3 30
(
 #"; \346\243\200\346\237\245\351\235\236init"
 #"\346\226\271\346\263\225\347\232\204\347\261\273\345\236\213"
) 0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 28 3 1 #" "
0 0 14 3 6 #"m-name"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 10 #"initialize"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                                "
0 0 24 3 2 #"#t"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 16 #"maybe-super-type"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                       ("
0 0 14 3 22 #"maybe-find-method-type"
0 0 28 3 2 #" ("
0 0 14 3 25 #"static-class->method-tenv"
0 0 28 3 2 #" ("
0 0 14 3 19 #"lookup-static-class"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-name"
0 0 28 3 3 #")) "
0 0 14 3 6 #"m-name"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 16 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 16 #"maybe-super-type"
0 0 28 29 1 #"\n"
0 0 28 3 39 #"                                      ("
0 0 14 3 17 #"check-is-subtype!"
0 0 28 3 2 #" ("
0 0 14 3 10 #"$proc-type"
0 0 28 3 1 #" "
0 0 14 3 9 #"var-types"
0 0 28 3 1 #" "
0 0 14 3 8 #"res-type"
0 0 28 3 2 #") "
0 0 14 3 16 #"maybe-super-type"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                      "
0 0 24 3 2 #"#t"
0 0 28 3 9 #")))))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 59
#";; check-if-implements! : ClassName * InterfaceName -> Bool"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 369"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 20 #"check-if-implements!"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 6 #"c-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 11 #"StaticClass"
0 0 28 3 2 #" ("
0 0 14 3 19 #"lookup-static-class"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 15 #"$a-static-class"
0 0 28 3 2 #" ("
0 0 14 3 6 #"s-name"
0 0 28 3 1 #" "
0 0 14 3 7 #"i-names"
0 0 28 3 1 #" "
0 0 14 3 7 #"f-names"
0 0 28 3 1 #" "
0 0 14 3 7 #"f-types"
0 0 28 3 1 #" "
0 0 14 3 6 #"m-tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 35 #"report-cant-implement-non-interface"
0 0 28 3 2 #"  "
0 0 14 3 6 #"c-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 13 #"$an-interface"
0 0 28 3 2 #" ("
0 0 14 3 11 #"method-tenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 17 #"class-method-tenv"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 14 3 25 #"static-class->method-tenv"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 19 #"lookup-static-class"
0 0 28 3 1 #" "
0 0 14 3 6 #"c-name"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 8 #"for-each"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 14 #"method-binding"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 6 #"m-name"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 14 #"method-binding"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 6 #"m-type"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 28 3 1 #" "
0 0 14 3 14 #"method-binding"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 13 #"c-method-type"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                     ("
0 0 14 3 22 #"maybe-find-method-type"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                      "
0 0 14 3 17 #"class-method-tenv"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                      "
0 0 14 3 6 #"m-name"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                ("
0 0 16 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 13 #"c-method-type"
0 0 28 29 1 #"\n"
0 0 28 3 37 #"                                    ("
0 0 14 3 17 #"check-is-subtype!"
0 0 28 29 1 #"\n"
0 0 28 3 37 #"                                     "
0 0 14 3 13 #"c-method-type"
0 0 28 3 1 #" "
0 0 14 3 6 #"m-type"
0 0 28 3 1 #" "
0 0 14 3 6 #"c-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 37 #"                                    ("
0 0 14 3 21 #"report-missing-method"
0 0 28 29 1 #"\n"
0 0 28 3 37 #"                                     "
0 0 14 3 6 #"c-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"m-name"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                          "
0 0 14 3 11 #"method-tenv"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 35 #"report-cant-implement-non-interface"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 6 #"c-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 19 #"check-if-implements"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 47 #"\"class ~s claims to implement non-interface ~s\""
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 6 #"c-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 21 #"report-missing-method"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 6 #"c-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 1 #" "
0 0 14 3 8 #"i-m-name"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 19 #"check-if-implements"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 52 #"\"class ~s claims to implement ~s, missing method ~s\""
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 6 #"c-name"
0 0 28 3 1 #" "
0 0 14 3 6 #"i-name"
0 0 28 3 1 #" "
0 0 14 3 8 #"i-m-name"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 39 #";;;;;;;;;;;;;;;; types ;;;;;;;;;;;;;;;;"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 17 #"check-equal-type!"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 2 #"t1"
0 0 28 3 1 #" "
0 0 14 3 2 #"t2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 2 #"t1"
0 0 28 3 1 #" "
0 0 14 3 2 #"t2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 24 3 2 #"#t"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 7 #"type-of"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                      "
0 0 20 3 37 #"\"Types didn't match: ~s != ~s in~%~s\""
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 2 #"t1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 2 #"t2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                      "
0 0 14 3 3 #"exp"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 55 #";; check-is-subtype! : Type * Type * Exp -> Unspecified"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 363"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 17 #"check-is-subtype!"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 11 #"is-subtype?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 24 3 2 #"#t"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 22 #"report-subtype-failure"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"           "
0 0 14 3 3 #"exp"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 22 #"report-subtype-failure"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 17 #"external-form-ty1"
0 0 28 3 1 #" "
0 0 14 3 17 #"external-form-ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 17 #"check-is-subtype!"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 35 #"\"~s is not a subtype of ~s in ~%~s\""
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 17 #"external-form-ty1"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 17 #"external-form-ty2"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 40 #";; need this for typing cast expressions"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 36 #";; is-subtype? : Type * Type -> Bool"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 363"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 11 #"is-subtype?"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"Type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 11 #"$class-type"
0 0 28 3 2 #" ("
0 0 14 3 5 #"name1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 22 #"                     ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"Type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 14 3 11 #"$class-type"
0 0 28 3 2 #" ("
0 0 14 3 5 #"name2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 37 #"                                    ("
0 0 14 3 23 #"statically-is-subclass?"
0 0 28 3 1 #" "
0 0 14 3 5 #"name1"
0 0 28 3 1 #" "
0 0 14 3 5 #"name2"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 16 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 10 #"$proc-type"
0 0 28 3 2 #" ("
0 0 14 3 5 #"args1"
0 0 28 3 1 #" "
0 0 14 3 4 #"res1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"Type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 10 #"$proc-type"
0 0 28 3 2 #" ("
0 0 14 3 5 #"args2"
0 0 28 3 1 #" "
0 0 14 3 4 #"res2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 3 #"and"
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 14 3 7 #"every2?"
0 0 28 3 1 #" "
0 0 14 3 11 #"is-subtype?"
0 0 28 3 1 #" "
0 0 14 3 5 #"args2"
0 0 28 3 1 #" "
0 0 14 3 5 #"args1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 36 #"                                   ("
0 0 14 3 11 #"is-subtype?"
0 0 28 3 1 #" "
0 0 14 3 4 #"res1"
0 0 28 3 1 #" "
0 0 14 3 4 #"res2"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 16 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 16 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 6 #"andmap"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"        (("
0 0 14 3 3 #"and"
0 0 28 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 28 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 28 3 3 #")) "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"        (("
0 0 14 3 2 #"or"
0 0 28 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 28 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 28 3 3 #")) "
0 0 24 3 2 #"#f"
0 0 28 3 2 #") "
0 0 18 3 22 #"; or maybe throw error"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"        (("
0 0 14 3 4 #"pred"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 28 3 3 #") ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 6 #"andmap"
0 0 28 3 1 #" "
0 0 14 3 4 #"pred"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst1"
0 0 28 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 4 #"lst2"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 16 3 4 #"else"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 7 #"every2?"
0 0 28 3 1 #" "
0 0 14 3 6 #"andmap"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 58
#";; statically-is-subclass? : ClassName * ClassName -> Bool"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 363"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 23 #"statically-is-subclass?"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 5 #"name1"
0 0 28 3 1 #" "
0 0 14 3 5 #"name2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 2 #"or"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 4 #"eqv?"
0 0 28 3 1 #" "
0 0 14 3 5 #"name1"
0 0 28 3 1 #" "
0 0 14 3 5 #"name2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 10 #"super-name"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 24 #"static-class->super-name"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 19 #"lookup-static-class"
0 0 28 3 1 #" "
0 0 14 3 5 #"name1"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 16 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 10 #"super-name"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 23 #"statically-is-subclass?"
0 0 28 3 1 #" "
0 0 14 3 10 #"super-name"
0 0 28 3 1 #" "
0 0 14 3 5 #"name2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"             "
0 0 24 3 2 #"#f"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 15 #"interface-names"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 29 #"static-class->interface-names"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 19 #"lookup-static-class"
0 0 28 3 1 #" "
0 0 14 3 5 #"name1"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 4 #"memv"
0 0 28 3 1 #" "
0 0 14 3 5 #"name2"
0 0 28 3 1 #" "
0 0 14 3 15 #"interface-names"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 23 #"report-bad-type-to-cast"
0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 4 #"type"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 16 #"bad-type-to-case"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 39 #"\"can't cast non-object; ~s had type ~s\""
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 3 #"exp"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 4 #"type"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 29 #"report-bad-type-to-instanceof"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 4 #"type"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 16 #"bad-type-to-case"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 54 #"\"can't apply instanceof to non-object; ~s had type ~s\""
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 3 #"exp"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 4 #"type"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0           0
