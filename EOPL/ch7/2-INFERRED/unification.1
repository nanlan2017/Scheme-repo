#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 47 151 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 64 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 211 211 211 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 211 211 211 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 128 128 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 128 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 192 0 0 0 -1
-1 2 49 #"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 192 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 89 172 255 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 89 172 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 820 0 28 3 1 #"("
0 0 16 3 6 #"module"
0 0 28 3 1 #" "
0 0 14 3 11 #"unification"
0 0 28 3 2 #" ("
0 0 14 3 3 #"lib"
0 0 28 3 1 #" "
0 0 20 3 9 #"\"eopl.ss\""
0 0 28 3 1 #" "
0 0 20 3 6 #"\"eopl\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 28 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 10 #"\"lang.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 21 #"\"data-structures.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 128
(
 #"; \342\226\210\342\226\210\342\226\210\342"
 #"\226\210\342\226\210\342\226\210\342\226\210\342"
 #"\226\210\342\226\210\342\226\210\342\226\210\342"
 #"\226\210\342\226\210\342\226\210\342\226\210 "
 #"\346\212\212\347\272\270\344\270\212 unification\347\232\204\350"
 #"\277\207\347\250\213 \347\224\250\346\225\260"
 #"\346\215\256\347\273\223\346\236\204\343"
 #"\200\201\345\210\206\350\247\243\345\207\272\347\232\204\345\260"
 #"\217api \346\236\204\345\273\272\345\207\272\346\235\245"
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 130
(
 #"; \342\226\210\342\226\210\342\226\210\342"
 #"\226\210\342\226\210\342\226\210\342\226\210\342"
 #"\226\210\342\226\210\342\226\210\342\226\210\342"
 #"\226\210\342\226\210\342\226\210\342\226\210 "
 #"\345\260\261\346\230\257\344\270\272typ"
 #"e var \346\261\202\345\207\272\345\205\266value (Typ"
 #"e)   \343\200\220type var\345\222\214 ty"
 #"pe\345\217\252\344\272\222\347\233\270"
 #"\345\256\232\344\271\211\347\232\204\343\200\221"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 1 #";"
0 0 18 3 4 #"  t0"
0 0 18 3 1 #" "
0 0 18 3 1 #"="
0 0 18 3 1 #" "
0 0 18 3 2 #"tf"
0 0 18 3 1 #" "
0 0 18 3 3 #"\342\206\222"
0 0 18 3 3 #" t1"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 1 #";"
0 0 18 3 2 #"  "
0 0 18 3 2 #"t1"
0 0 18 3 1 #" "
0 0 18 3 1 #"="
0 0 18 3 1 #" "
0 0 18 3 2 #"tx"
0 0 18 3 1 #" "
0 0 18 3 3 #"\342\206\222"
0 0 18 3 3 #" t2"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 1 #";"
0 0 18 3 2 #"  "
0 0 18 3 2 #"t3"
0 0 18 3 1 #" "
0 0 18 3 1 #"="
0 0 18 3 4 #" int"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 1 #";"
0 0 18 3 2 #"  "
0 0 18 3 2 #"t4"
0 0 18 3 1 #" "
0 0 18 3 1 #"="
0 0 18 3 4 #" int"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 1 #";"
0 0 18 3 2 #"  "
0 0 18 3 2 #"t2"
0 0 18 3 1 #" "
0 0 18 3 1 #"="
0 0 18 3 4 #" int"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 3 #";  "
0 0 18 3 2 #"tf"
0 0 18 3 1 #" "
0 0 18 3 1 #"="
0 0 18 3 4 #" int"
0 0 18 3 1 #" "
0 0 18 3 3 #"\342\206\222"
0 0 18 3 3 #" t3"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 1 #";"
0 0 18 3 2 #"  "
0 0 18 3 2 #"tf"
0 0 18 3 1 #" "
0 0 18 3 1 #"="
0 0 18 3 1 #" "
0 0 18 3 2 #"tx"
0 0 18 3 1 #" "
0 0 18 3 6 #"\342\206\222 t4"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 48
(
 #"; \345\201\207\350\256\276 int = 1, bool ="
 #" 2,  \345\255\230\345\234\250\345\217\230\351\207\217 ti , f"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 73
(
 #"; \343\200\220\345\205\250\346\230\257\344"
 #"\270\200\346\254\241\347\232\204\343\200\201\345"
 #"\210\2317\345\205\203\346\226\271\347\250\213"
 #"\351\234\200\350\246\2017\346\235"
 #"\241\344\270\215\351\207\215\345\244\215\347\232\204\347"
 #"\255\211\345\274\217\345\215\263\345\217\257\343\200\221"
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 23 #"; t0 = 1 -> 1 -> 1 -> 1"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 13 #"; t1 = 1 -> 1"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #"; f = 1 -> 1"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #"; f = x -> 1"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 22
(
 #";\343\200\220\345\256\232\344\271\211\345"
 #"\237\272\346\234\254\347\232\204\343\200\221"
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #"; x = 1 -> f"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 7 #"; f = 2"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 26 #"; ===>  x = 1 -> 2        "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 88
(
 #";==================================================================="
 #"======= substitution"
) 0 0 18 3 3 #"  ("
0 0 18 3 10 #"\345\246\202\345\220\214env:"
0 0 18 3 1 #" "
0 0 18 3 3 #"t_i"
0 0 18 3 1 #" "
0 0 18 3 3 #"<->"
0 0 18 3 6 #" Type)"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"empty-subst"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 24 3 1 #"'"
0 0 28 3 3 #"())"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"extend-subst"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 2 #"pr"
0 0 28 3 3 #") ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" [("
0 0 14 3 6 #"oldlhs"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 2 #"pr"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 35 #"                                  ("
0 0 14 3 6 #"oldrhs"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 2 #"pr"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 6 #"oldlhs"
0 0 28 3 2 #" ("
0 0 14 3 15 #"apply-one-subst"
0 0 28 3 1 #" "
0 0 14 3 6 #"oldrhs"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 5 #"subst"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                              "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 14 #"; t0 [tv = t1]"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 47 #"; apply-one-subst :: Type * Tvar * Type -> Type"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 61
#"; e.g. (apply-one-subst  'int->t0'  t0  bool ) =  'int->bool'"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 87
(
 #";      (apply-one-subst (proc-type (int-type) (tvar-type 0)) (tvar-t"
 #"ype 0) (bool-type))"
) 0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 15 #"apply-one-subst"
0 0 28 3 1 #" "
0 0 14 3 9 #"ty-target"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"type"
0 0 28 3 1 #" "
0 0 14 3 9 #"ty-target"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 8 #"int-type"
0 0 28 3 3 #" ()"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 8 #"int-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"bool-type"
0 0 28 3 3 #" ()"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 9 #"bool-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 28 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 28 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 9 #"proc-type"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 15 #"apply-one-subst"
0 0 28 3 1 #" "
0 0 14 3 8 #"arg-type"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 15 #"apply-one-subst"
0 0 28 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 28 3 2 #" ("
0 0 14 3 2 #"sn"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 9 #"ty-target"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                     "
0 0 14 3 3 #"ty1"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                     "
0 0 14 3 9 #"ty-target"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"      ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 47 #"; substitution :  list of pairs < TVar ~ Type >"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"type"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 8 #"int-type"
0 0 28 3 3 #" ()"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 8 #"int-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"bool-type"
0 0 28 3 3 #" ()"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 9 #"bool-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"proc-type"
0 0 28 3 2 #" ("
0 0 14 3 2 #"t1"
0 0 28 3 1 #" "
0 0 14 3 2 #"t2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 9 #"proc-type"
0 0 28 3 2 #" ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 28 3 1 #" "
0 0 14 3 2 #"t1"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 29 #"                            ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 28 3 1 #" "
0 0 14 3 2 #"t2"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"tvar-type"
0 0 28 3 2 #" ("
0 0 14 3 2 #"sn"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 3 #"tmp"
0 0 28 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 16 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 3 #"tmp"
0 0 28 29 1 #"\n"
0 0 28 3 24 #"                       ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 3 #"tmp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                       "
0 0 14 3 2 #"ty"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"      ))"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 83
(
 #";==================================================================="
 #"======= unifier"
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 56 #";; unifier : Type * Type * Subst * Exp -> Subst OR Fails"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 264"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 7 #"unifier"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"            ("
0 0 14 3 3 #"ty2"
0 0 28 3 2 #" ("
0 0 14 3 19 #"apply-subst-to-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 16 3 4 #"cond"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"          (("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 2 #") "
0 0 14 3 5 #"subst"
0 0 28 3 13 #")            "
0 0 28 29 1 #"\n"
0 0 28 3 12 #"          (("
0 0 14 3 10 #"tvar-type?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 14 #"no-occurrence?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 12 #"extend-subst"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 30 #"report-no-occurrence-violation"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"          (("
0 0 14 3 10 #"tvar-type?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 14 #"no-occurrence?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 12 #"extend-subst"
0 0 28 3 1 #" "
0 0 14 3 5 #"subst"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 30 #"report-no-occurrence-violation"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"          (("
0 0 14 3 3 #"and"
0 0 28 3 2 #" ("
0 0 14 3 10 #"proc-type?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 3 #") ("
0 0 14 3 10 #"proc-type?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 12 #"           ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 5 #"subst"
0 0 28 3 2 #" ("
0 0 14 3 7 #"unifier"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 19 #"proc-type->arg-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 19 #"proc-type->arg-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 25 #"                         "
0 0 14 3 5 #"subst"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 5 #"subst"
0 0 28 3 2 #" ("
0 0 14 3 7 #"unifier"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           ("
0 0 14 3 22 #"proc-type->result-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 28 #"                           ("
0 0 14 3 22 #"proc-type->result-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                           "
0 0 14 3 5 #"subst"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"               "
0 0 14 3 5 #"subst"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 16 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 26 #"report-unification-failure"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 26 #"report-unification-failure"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 2 #") "
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 19 #"unification-failure"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 44 #"\"Type mismatch: ~s doesn't match ~s in ~s~%\""
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 30 #"report-no-occurrence-violation"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 19 #"check-no-occurence!"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 20 3 68
(
 #"\"Can't unify: type variable ~s occurs in type ~s in expression ~s~%"
 #"\""
) 0 0 28 3 1 #" "
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 14 3 3 #"exp"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 39 #";; no-occurrence? : Tvar * Type -> Bool"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 47 #";; usage: Is there an occurrence of tvar in ty?"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 12 #";; Page: 265"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 14 #"no-occurrence?"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 6 #"lambda"
0 0 28 3 2 #" ("
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"type"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 8 #"int-type"
0 0 28 3 4 #" () "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"bool-type"
0 0 28 3 4 #" () "
0 0 24 3 2 #"#t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"proc-type"
0 0 28 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 28 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 3 #"and"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 14 #"no-occurrence?"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 8 #"arg-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 14 #"no-occurrence?"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 9 #"tvar-type"
0 0 28 3 2 #" ("
0 0 14 3 13 #"serial-number"
0 0 28 3 3 #") ("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 4 #"tvar"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 6 #"))))))"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0           0
