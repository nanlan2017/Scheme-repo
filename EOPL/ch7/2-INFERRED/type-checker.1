#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 47 151 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 64 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 211 211 211 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 211 211 211 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 128 128 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 64 128 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 128 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 192 0 0 0 -1
-1 2 49 #"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 192 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 89 172 255 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 89 172 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 680 0 28 3 1 #"("
0 0 16 3 6 #"module"
0 0 28 3 1 #" "
0 0 14 3 12 #"type-checker"
0 0 28 3 2 #" ("
0 0 14 3 3 #"lib"
0 0 28 3 1 #" "
0 0 20 3 9 #"\"eopl.ss\""
0 0 28 3 1 #" "
0 0 20 3 6 #"\"eopl\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"provide"
0 0 28 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 10 #"\"lang.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 23 #"\"lang-type-helpers.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 7 #"require"
0 0 28 3 1 #" "
0 0 20 3 21 #"\"data-structures.scm\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 75
(
 #"; =================================================================="
 #"======="
) 0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 46 #"; check-equal-type! :: Type * Type * Exp -> ()"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 14 3 20 #"report-unequal-types"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"        "
0 0 24 3 2 #"#t"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 20 #"report-unequal-types"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 17 #"check-equal-type!"
0 0 28 3 1 #" "
0 0 20 3 39 #"\"Types didn\342\200\231t match: ~s != ~a in~%~a\""
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 3 #") ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 2 #") "
0 0 14 3 3 #"exp"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 28 #"report-rator-not-a-proc-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"rator-type"
0 0 28 3 1 #" "
0 0 14 3 5 #"rator"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 28 #"report-rator-not-a-proc-type"
0 0 28 3 1 #" "
0 0 20 3 51 #"\"Actual Rator type is ~s in ~s , that's illegal!~n\""
0 0 28 3 1 #" "
0 0 14 3 10 #"rator-type"
0 0 28 3 1 #" "
0 0 14 3 5 #"rator"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 3 #"  ("
0 0 18 3 6 #"define"
0 0 18 3 2 #" ("
0 0 18 3 21 #"type-to-external-form"
0 0 18 3 1 #" "
0 0 18 3 3 #"ty)"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 5 #"    ("
0 0 18 3 5 #"cases"
0 0 18 3 1 #" "
0 0 18 3 4 #"type"
0 0 18 3 3 #" ty"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 7 #"      ("
0 0 18 3 11 #"int-type ()"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 16 #"                "
0 0 18 3 1 #"'"
0 0 18 3 4 #"int)"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 7 #"      ("
0 0 18 3 12 #"bool-type ()"
0 0 28 29 1 #"\n"
0 0 18 3 18 #";                 "
0 0 18 3 1 #"'"
0 0 18 3 5 #"bool)"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 7 #"      ("
0 0 18 3 9 #"proc-type"
0 0 18 3 2 #" ("
0 0 18 3 6 #"arg-ty"
0 0 18 3 1 #" "
0 0 18 3 7 #"res-ty)"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 18 #"                 ("
0 0 18 3 4 #"list"
0 0 18 3 2 #" ("
0 0 18 3 21 #"type-to-external-form"
0 0 18 3 1 #" "
0 0 18 3 6 #"arg-ty"
0 0 18 3 2 #") "
0 0 18 3 1 #"'"
0 0 18 3 2 #"->"
0 0 18 3 2 #" ("
0 0 18 3 21 #"type-to-external-form"
0 0 18 3 1 #" "
0 0 18 3 9 #"res-ty)))"
0 0 28 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 7 #"      ("
0 0 18 3 5 #"else "
0 0 18 3 3 #"#f)"
0 0 28 29 1 #"\n"
0 0 18 3 9 #";      ))"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 73
(
 #"; =================================================================="
 #"====="
) 0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 14 #"typeof-program"
0 0 28 3 1 #" "
0 0 14 3 4 #"prog"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 7 #"program"
0 0 28 3 1 #" "
0 0 14 3 4 #"prog"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 28 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #" ("
0 0 14 3 10 #"init-tyenv"
0 0 28 3 5 #")))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 31 #"; typeof :: Exp * TyEnv -> type"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 10 #"expression"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"const-exp"
0 0 28 3 2 #" ("
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 8 #"int-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 28 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 14 3 11 #"apply-tyenv"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 8 #"diff-exp"
0 0 28 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 2 #"e2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 3 #"ty2"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 2 #"e2"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 28 3 2 #") "
0 0 14 3 2 #"e1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 28 3 2 #") "
0 0 14 3 2 #"e1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 8 #"int-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 9 #"zero?-exp"
0 0 28 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 8 #"int-type"
0 0 28 3 2 #") "
0 0 14 3 2 #"e1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 9 #"bool-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 28 3 2 #" ("
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 2 #"e2"
0 0 28 3 1 #" "
0 0 14 3 2 #"e3"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 3 #"ty2"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 2 #"e2"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 3 #"ty3"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 2 #"e3"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 9 #"bool-type"
0 0 28 3 2 #") "
0 0 14 3 2 #"e1"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty3"
0 0 28 3 1 #" "
0 0 14 3 3 #"exp"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"                "
0 0 14 3 3 #"ty2"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"var"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 16 #"               ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" [("
0 0 14 3 3 #"ty1"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                 ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #" ("
0 0 14 3 13 #"$extend-tyenv"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 18 3 13 #";; 1-arg proc"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"var"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" [("
0 0 14 3 8 #"res-type"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #" ("
0 0 14 3 13 #"$extend-tyenv"
0 0 28 3 1 #" "
0 0 14 3 3 #"var"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 9 #"proc-type"
0 0 28 3 1 #" "
0 0 14 3 2 #"ty"
0 0 28 3 1 #" "
0 0 14 3 8 #"res-type"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 8 #"call-exp"
0 0 28 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 28 3 1 #" "
0 0 14 3 4 #"rand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (("
0 0 14 3 10 #"rator-type"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 5 #"rator"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 9 #"rand-type"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 4 #"rand"
0 0 28 3 1 #" "
0 0 14 3 5 #"tyenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 16 3 5 #"cases"
0 0 28 3 1 #" "
0 0 14 3 4 #"type"
0 0 28 3 1 #" "
0 0 14 3 10 #"rator-type"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 9 #"proc-type"
0 0 28 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 28 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 16 3 5 #"begin"
0 0 28 29 1 #"\n"
0 0 28 3 34 #"                                 ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 8 #"arg-type"
0 0 28 3 1 #" "
0 0 14 3 9 #"rand-type"
0 0 28 3 1 #" "
0 0 14 3 4 #"rand"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                 "
0 0 14 3 11 #"result-type"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 16 3 4 #"else"
0 0 28 3 2 #" ("
0 0 14 3 28 #"report-rator-not-a-proc-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"rator-type"
0 0 28 3 1 #" "
0 0 14 3 5 #"rator"
0 0 28 3 36 #")))))                               "
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 18 3 9 #";; letrec"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 10 #"letrec-exp"
0 0 28 3 2 #" ("
0 0 14 3 10 #"p-res-type"
0 0 28 3 1 #" "
0 0 14 3 3 #"pid"
0 0 28 3 1 #" "
0 0 14 3 5 #"b-var"
0 0 28 3 1 #" "
0 0 14 3 10 #"b-var-type"
0 0 28 3 1 #" "
0 0 14 3 6 #"p-body"
0 0 28 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 16 3 4 #"let*"
0 0 28 3 3 #" [("
0 0 14 3 9 #"new-tyenv"
0 0 28 3 2 #" ("
0 0 14 3 13 #"$extend-tyenv"
0 0 28 3 1 #" "
0 0 14 3 3 #"pid"
0 0 28 3 2 #" ("
0 0 14 3 9 #"proc-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"b-var-type"
0 0 28 3 1 #" "
0 0 14 3 10 #"p-res-type"
0 0 28 3 2 #") "
0 0 14 3 5 #"tyenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 26 #"                         ("
0 0 14 3 11 #"p-body-type"
0 0 28 3 2 #" ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 6 #"p-body"
0 0 28 3 2 #" ("
0 0 14 3 13 #"$extend-tyenv"
0 0 28 3 1 #" "
0 0 14 3 5 #"b-var"
0 0 28 3 1 #" "
0 0 14 3 10 #"b-var-type"
0 0 28 3 1 #" "
0 0 14 3 9 #"new-tyenv"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 20 #"\342\230\205check-equal-type!"
0 0 28 3 1 #" "
0 0 14 3 10 #"p-res-type"
0 0 28 3 1 #" "
0 0 14 3 11 #"p-body-type"
0 0 28 3 1 #" "
0 0 14 3 6 #"p-body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 6 #"typeof"
0 0 28 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 28 3 1 #" "
0 0 14 3 9 #"new-tyenv"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 18 #"                  "
0 0 28 29 1 #"\n"
0 0 28 3 8 #"      ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 65
#"; =============================================================  "
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"check"
0 0 28 3 1 #" "
0 0 14 3 3 #"src"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ("
0 0 14 3 21 #"type-to-external-form"
0 0 28 3 1 #"("
0 0 14 3 14 #"typeof-program"
0 0 28 3 2 #" ("
0 0 14 3 10 #"scan&parse"
0 0 28 3 1 #" "
0 0 14 3 3 #"src"
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  )"
0 0 28 29 1 #"\n"
0           0
